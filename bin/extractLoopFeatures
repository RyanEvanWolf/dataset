#!/usr/bin/env python
#####ros related imports
import rospy 
from front_end.srv import singleImageDetection,singleImageDetectionRequest
from front_end.features import detectorLookUpTable
from dataset.utils import *
from cv_bridge import CvBridge
import os
import cv2
import sys
from front_end.features import *
import time
import datetime
import pickle

import argparse

import rosbag

cvb=CvBridge()

parser =argparse.ArgumentParser()
parser.add_argument("rootDir")
parser.add_argument("loopID")
parser.add_argument("detectorType")
parser.add_argument("--max_images",default=-1,type=int)
parser.add_argument("--output_directory",default="/media/ryan/EXTRA/output")
args,unknown=parser.parse_known_args()

currentDirectories=getDefaultDirectories()
currentDirectories["Root"]=args.rootDir

projectFolder=Directories(currentDirectories) 

sequenceData=unpackBag(projectFolder.getBagName(args.loopID),args.max_images)
if(args.detector_table_dir==""):
    table=getDetectorTable()
else:
    table=getDetectorTable(args.detector_table_dir)
#####
#pick detector based on input 


newRequest=singleImageDetectionRequest()
###get detector Settings
newRequest.returnKP=False
for i in sorted(table.keys()):
    if(table[i]["Name"]==args.detectorType):
        newRequest.detID.append(i)

serviceName="feature_node/singleImageDetection"
rospy.init_node("extract_loop_features_"+args.detectorType)

rospy.wait_for_service(serviceName)
serv=rospy.ServiceProxy(serviceName,singleImageDetection)
results=[]

Extractcount=0
fileCount=0
avgTime=0.0

##create the output directory if it does not exist
finalOutFolder=projectFolder.getFeaturePath(args.loopID,args.detectorType)  #+"/"+str(count).zfill(5)+".p"
if(not os.path.exists(finalOutFolder)):
    os.makedirs(finalOutFolder)
#

AlreadyCompleted=os.listdir(finalOutFolder)
for f in range(0,len(sequenceData["Left"])):
    fileCount+=1
    filename=str(fileCount).zfill(5)+".p"
    if(filename in AlreadyCompleted):
        print("Completed :"+filename+"   - Skipping")
    else:
        print(filename)
        startTime=time.time()
        print("sent @ "+str(startTime))
        newRequest.leftImg=sequenceData["Left"][f]
        newRequest.rightImg=sequenceData["Right"][f]
        ans=serv(newRequest)
        totalTime=time.time()-startTime
        avgTime+=totalTime
        Extractcount+=1

        print("-----"+str(f)+"/"+str(len(sequenceData["Left"])))
        estimatedSecondsLeft=(len(sequenceData["Left"])-fileCount)*(avgTime/Extractcount)
        print("avgTime",str(datetime.timedelta(seconds=(avgTime/Extractcount))))
        print("estimatedTimeLeft=",str(datetime.timedelta(seconds=estimatedSecondsLeft)))
        outFile=open(finalOutFolder+"/"+filename,"wb")
        pickle.dump(ans,outFile)
        outFile.close()


print("completed")