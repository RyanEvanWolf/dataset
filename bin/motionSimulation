#!/usr/bin/env python


import math
import time

import pickle

import cv2
import numpy as np
import rospy
from cv_bridge import CvBridge

from dataset.simulation import *
from bumblebee.baseTypes import *
from bumblebee.stereo import stereoCamera
from bumblebee.utils import createDir
from bumblebee.drawing import *



from bumblebee.motion import *


rospy.init_node('motionSimulation')

cvb=CvBridge()


rootDir="/media/ryan/EXTRA/output/Simulation"
createDir(rootDir)

lSettings=getSimulatedLandmarkSettings()
mSettings=MotionCategorySettings()

f=open(rootDir+"/motion.p", 'wb')
pickle.dump(mSettings,f)
f.close()
f=open(rootDir+"/landmark.p", 'wb')
pickle.dump(lSettings,f)
f.close()
bumblebee=stereoCamera()
f=open(rootDir+"/camera.p", 'wb')
pickle.dump(bumblebee.kSettings,f)
f.close()

totalMotions=1

for m in mSettings.keys():
    motionDir=rootDir+"/"+m+"/straight/Data" 
    createDir(motionDir)
    print("generating "+m+" @ "+motionDir)
    for j in range(0,totalMotions):
        filename=motionDir+"/"+str(j+1).zfill(4)+".p"
        imageDir=rootDir+"/"+m+"/straight/Images/"+str(j+1).zfill(4)
        Rtheta=noisyRotations(mSettings[m]["RotationNoise"])
        C=forwardTranslation(mSettings[m]["TranslationMean"],
                            mSettings[m]["TranslationNoise"])
        R=composeR(Rtheta,degrees=True)
        T=-R.dot(C)
        forwardHomog=motionEdge(Rtheta,T)
        simulator=motionSimulatedFrame()
        simulator.simulate(bumblebee,lSettings,forwardHomog,500)
        print(filename,imageDir)
        print(forwardHomog.getFormatted())
        print("sim",Rtheta,C)
        f=open(filename,"wb")
        pickle.dump(simulator,f)
        f.close()

for m in mSettings.keys():
    motionDir=rootDir+"/"+m+"/turn/Data" 
    createDir(motionDir)
    print("generating "+m+" @ "+motionDir)
    for j in range(0,totalMotions):
        filename=motionDir+"/"+str(j+1).zfill(4)+".p"
        imageDir=rootDir+"/"+m+"/turn/Images/"+str(j+1).zfill(4)
        Rtheta=dominantRotation(mSettings[m]["RotationMean"],
                            mSettings[m]["RotationNoise"])
        C=forwardTranslation(mSettings[m]["TranslationMean"],
                            mSettings[m]["TranslationNoise"])
        R=composeR(Rtheta,degrees=True)
        T=-R.dot(C)
        forwardHomog=motionEdge(Rtheta,T)
        simulator=motionSimulatedFrame()
        simulator.simulate(bumblebee,lSettings,forwardHomog,500)
        print(filename,imageDir)
        print(forwardHomog.getFormatted())
        print("sim",Rtheta,C)
        f=open(filename,"wb")
        pickle.dump(simulator,f)
        f.close()