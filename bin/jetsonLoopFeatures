#!/usr/bin/env python
#####ros related imports
import rospy 
from front_end.srv import singleImageDetection,singleImageDetectionRequest
from front_end.features import detectorLookUpTable
from dataset.utils import *
from cv_bridge import CvBridge
import os
import cv2
import sys
from front_end.features import *
import time
import datetime
import pickle

import argparse

import rosbag

cvb=CvBridge()

parser =argparse.ArgumentParser()
parser.add_argument("rootDir")
parser.add_argument("loopID")
parser.add_argument("detectorType")
parser.add_argument("operatingCurve",help=str(OperatingCurveIDs()))
parser.add_argument("--max_images",default=-1,type=int)
parser.add_argument("--detector_table_dir",default="",help="full path to the detector descriptor yaml lookup table")
parser.add_argument("--output_directory",default="/media/ryan/EXTRA/output")
args,unknown=parser.parse_known_args()

if(not(args.operatingCurve in OperatingCurveIDs())):
    print("Curve ID not Found, terminating")

    sys.exit()
else:
    print("extracting curve:" +args.operatingCurve)

print("Loaded: Loading detector Table")
if(args.detector_table_dir==""):
    table=getDetectorTable()
else:
    table=getDetectorTable(args.detector_table_dir)

print("Loaded")
currentDirectories=getDefaultDirectories()
currentDirectories["Root"]=args.rootDir
currentDirectories["RootOut"]=args.output_directory


projectFolder=Directories(currentDirectories) 
print("Loading Bag sequence")
sequenceData=unpackBag(projectFolder.getBagName(args.loopID),args.max_images)
#pick detector based on input 


pickleDir=projectFolder.getCurvePickle(args.loopID,args.detectorType)


f=open(pickleDir,"r")
inData=pickle.load(f)
f.close()   

print(inData.keys())
print(inData["Settings"].keys())

print(len(sequenceData["Left"]),len(inData["Settings"][args.operatingCurve]))
newRequest=singleImageDetectionRequest()
####get detector Settings
newRequest.returnKP=False


serviceName="feature_node_cpp/singleImageDetection"
rospy.init_node("extract_loop_features_"+args.detectorType)

rospy.wait_for_service(serviceName)
serv=rospy.ServiceProxy(serviceName,singleImageDetection)
results=[]

count=0

avgTime=0.0
print("starting")

for f in range(0,len(sequenceData["Left"])):
    startTime=time.time()
    print("sent @ "+str(startTime))
    newRequest.leftImg=sequenceData["Left"][f]
    newRequest.rightImg=sequenceData["Right"][f]
    newRequest.detID=[]
    for i in OperatingCurveIDs():
        newRequest.detID.append(inData["Settings"][i][f])
    ans=serv(newRequest)
    totalTime=time.time()-startTime
    avgTime+=totalTime
    count+=1
    print(ans.outputFrames[0].processingTime[0])
    print(ans.outputFrames[0].processingTime[1])
    print(len(ans.outputFrames[0].processingTime))
    print(ans.outputFrames[0].nLeft)     
    print("-----"+str(f)+"/"+str(len(sequenceData["Left"])))
    estimatedSecondsLeft=(len(sequenceData["Left"])-count)*(avgTime/count)
    print("avgTime",str(datetime.timedelta(seconds=(avgTime/count))))
    print("estimatedTimeLeft=",str(datetime.timedelta(seconds=estimatedSecondsLeft)))
    results.append(ans)
fileName=projectFolder.getFeaturePath(args.loopID,args.detectorType)+"_jetsonCurves.p"
outFile=open(fileName,"wb")
print("outFile",fileName)
pickle.dump(results,outFile)
outFile.close()


print("completed")
